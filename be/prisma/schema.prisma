generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:0000@localhost:3306/rentready"
}

model account {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  deletedAt         DateTime            @default(now())
  name              String              @db.VarChar(255)
  username          String              @unique(map: "Account_username_key") @db.VarChar(255)
  email             String              @unique(map: "Account_email_key") @db.VarChar(255)
  phone             String              @default("")
  avatar            String              @default("")
  password          String
  provider          account_provider    @default(register)
  accountType       account_accountType @default(owner)
  status            Boolean             @default(true)
  roomId            Int?                @unique(map: "Account_roomId_key")
  refreshToken      String?
  room              room?               @relation(fields: [roomId], references: [id], map: "Account_roomId_fkey")
  comment           comment[]
  house             house[]
  identifycard      identifycard?
  news              news[]
  notification      notification[]
  otherutilities    otherutilities[]
  passwordresetcode passwordresetcode[]
  paymentgateway    paymentgateway?
  problem           problem[]
  recipients        recipients[]
}

model bill {
  id            Int               @id @default(autoincrement())
  roomId        Int?
  billCode      Float
  roomPrice     Float
  debt          Float
  total         Float
  note          String
  paymentLink   String
  isPaid        Boolean
  paymentMetod  bill_paymentMetod @default(None)
  evidence      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?
  room          room?             @relation(fields: [roomId], references: [id], map: "Bill_roomId_fkey")
  priceitembill priceitembill[]

  @@index([roomId], map: "Bill_roomId_fkey")
}

model comment {
  id        Int       @id @default(autoincrement())
  createdId Int
  newsId    Int?
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  account   account   @relation(fields: [createdId], references: [id], map: "Comment_createdId_fkey")
  news      news?     @relation(fields: [newsId], references: [id], map: "Comment_newsId_fkey")

  @@index([createdId], map: "Comment_createdId_fkey")
  @@index([newsId], map: "Comment_newsId_fkey")
}

model contract {
  id           Int          @id @default(autoincrement())
  roomId       Int?
  signatory    Int          @unique(map: "Contract_signatory_key")
  startDate    DateTime     @default(now())
  endDate      DateTime
  isExpired    Boolean
  note         String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?
  room         room?        @relation(fields: [roomId], references: [id], map: "Contract_roomId_fkey")
  memberofroom memberofroom @relation(fields: [signatory], references: [id], map: "Contract_signatory_fkey")

  @@index([roomId], map: "Contract_roomId_fkey")
}

model defaultprice {
  id            Int               @id @default(autoincrement())
  name          String
  unit          defaultprice_unit
  priceitembill priceitembill[]
  pricelistitem pricelistitem[]
}

model house {
  id                    Int                     @id @default(autoincrement())
  name                  String
  status                Boolean
  locationId            Int                     @unique(map: "House_locationId_key")
  electricPrice         Int
  waterPrice            Int
  hostId                Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime?
  account               account?                @relation(fields: [hostId], references: [id], map: "House_hostId_fkey")
  locationschema        locationschema          @relation(fields: [locationId], references: [id], map: "House_locationId_fkey")
  housedefaultutilities housedefaultutilities[]
  houseotherutilities   houseotherutilities[]
  news                  news[]
  pricelistitem         pricelistitem[]
  room                  room[]
  

  @@index([hostId], map: "House_hostId_fkey")
}

model identifycard {
  identifyNumber String
  imageFrontSide String
  imageBackSide  String
  accountId      Int     @unique(map: "IdentifyCard_accountId_key")
  account        account @relation(fields: [accountId], references: [id], map: "IdentifyCard_accountId_fkey")
}

model imagesnews {
  id     Int    @id @default(autoincrement())
  url    String
  newsId Int?
  news   news?  @relation(fields: [newsId], references: [id], map: "ImagesNews_newsId_fkey")

  @@index([newsId], map: "ImagesNews_newsId_fkey")
}

model locationschema {
  id             Int    @id @default(autoincrement())
  district       String
  ward           String
  province       String
  detailLocation String
  house          house?
}

model memberofroom {
  id              Int                 @id @default(autoincrement())
  name            String
  phone           String
  dob             String
  gender          memberofroom_gender
  avatar          String
  email           String
  district        String
  ward            String
  province        String
  detailLocation  String
  cccd            String
  issueDateCCCD   DateTime
  placeIssueCCCD  String
  imageFront      String
  imageBack       String
  note            String
  roomId          Int
  isOut           Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime?
  outDate         DateTime
  contract        contract?
  room            room                @relation(fields: [roomId], references: [id], map: "MemberOfRoom_roomId_fkey")
  temporyresident temporyresident?

  @@index([roomId], map: "MemberOfRoom_roomId_fkey")
}

model news {
  id         Int          @id @default(autoincrement())
  authorId   Int?
  houseId    Int?
  title      String
  content    String
  comment    comment[]
  imagesnews imagesnews[]
  account    account?     @relation(fields: [authorId], references: [id], map: "News_authorId_fkey")
  house      house?       @relation(fields: [houseId], references: [id], map: "News_houseId_fkey")

  @@index([authorId], map: "News_authorId_fkey")
  @@index([houseId], map: "News_houseId_fkey")
}

model notification {
  id                                               Int               @id @default(autoincrement())
  sender                                           Int
  message                                          String
  type                                             notification_type
  link                                             String
  createdAt                                        DateTime          @default(now())
  updatedAt                                        DateTime?
  account                                          account           @relation(fields: [sender], references: [id], map: "Notification_sender_fkey")
  recipients_recipients_notificationTonotification recipients[]      @relation("recipients_notificationTonotification")

  @@index([sender], map: "Notification_sender_fkey")
}

model otherutilities {
  id                  Int                   @id @default(autoincrement())
  name                String
  userID              Int
  houseotherutilities houseotherutilities[]
  account             account               @relation(fields: [userID], references: [id], map: "OtherUtilities_userID_fkey")

  @@index([userID], map: "OtherUtilities_userID_fkey")
}

model passwordresetcode {
  id        Int       @id @default(autoincrement())
  code      String
  expiredAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  accountId Int
  account   account   @relation(fields: [accountId], references: [id], map: "PasswordResetCode_accountId_fkey")

  @@index([accountId], map: "PasswordResetCode_accountId_fkey")
}

model paymentgateway {
  clientId  String
  APIKey    String
  checksum  String
  accountId Int     @unique(map: "PaymentGateway_accountId_key")
  account   account @relation(fields: [accountId], references: [id], map: "PaymentGateway_accountId_fkey")
}

model priceitembill {
  id           Int          @id @default(autoincrement())
  billId       Int?
  base         Int
  unitPrice    Float
  startUnit    Int
  endUnit      Int
  totalUnit    Int
  defaultprice defaultprice @relation(fields: [base], references: [id], map: "PriceItemBill_base_fkey")
  bill         bill?        @relation(fields: [billId], references: [id], map: "PriceItemBill_billId_fkey")

  @@index([base], map: "PriceItemBill_base_fkey")
  @@index([billId], map: "PriceItemBill_billId_fkey")
}

model pricelistitem {
  id           Int          @id @default(autoincrement())
  baseId       Int
  price        Float
  houseId      Int?
  defaultprice defaultprice @relation(fields: [baseId], references: [id], map: "PriceListItem_baseId_fkey")
  house        house?       @relation(fields: [houseId], references: [id], map: "PriceListItem_houseId_fkey")

  @@index([baseId], map: "PriceListItem_baseId_fkey")
  @@index([houseId], map: "PriceListItem_houseId_fkey")
}

model problem {
  id        Int            @id @default(autoincrement())
  type      problem_type   @default(common)
  status    problem_status @default(none)
  title     String
  content   String
  roomId    Int
  creatorId Int
  createdAt DateTime       @default(now())
  updatedAt DateTime?
  account   account        @relation(fields: [creatorId], references: [id], map: "Problem_creatorId_fkey")
  room      room           @relation(fields: [roomId], references: [id], map: "Problem_roomId_fkey")

  @@index([creatorId], map: "Problem_creatorId_fkey")
  @@index([roomId], map: "Problem_roomId_fkey")
}

model recipients {
  id                                                 Int           @id @default(autoincrement())
  user                                               Int
  isRead                                             Boolean
  notification                                       Int?
  notification_recipients_notificationTonotification notification? @relation("recipients_notificationTonotification", fields: [notification], references: [id], map: "Recipients_notification_fkey")
  account                                            account       @relation(fields: [user], references: [id], map: "Recipients_user_fkey")

  @@index([notification], map: "Recipients_notification_fkey")
  @@index([user], map: "Recipients_user_fkey")
}

model room {
  id           Int            @id @default(autoincrement())
  floor        Int
  name         String
  status       room_status    @default(Empty)
  roomType     room_roomType
  roomPrice    Float
  deposit      Float
  area         Int
  houseId      Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?
  account      account?
  bill         bill[]
  contract     contract[]
  memberofroom memberofroom[]
  problem      problem[]
  house        house          @relation(fields: [houseId], references: [id], map: "Room_houseId_fkey")

  @@index([houseId], map: "Room_houseId_fkey")
}

model temporyresident {
  id           Int          @id @default(autoincrement())
  memberId     Int          @unique(map: "TemporyResident_memberId_key")
  pathFile     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?
  isExpired    Boolean
  memberofroom memberofroom @relation(fields: [memberId], references: [id], map: "TemporyResident_memberId_fkey")
}

model defaultutilities {
  id                    Int                     @id @default(autoincrement())
  name                  String
  housedefaultutilities housedefaultutilities[]
}

model housedefaultutilities {
  houseId            Int
  defaultUtilitiesId Int
  defaultutilities   defaultutilities @relation(fields: [defaultUtilitiesId], references: [id], onDelete: Cascade, map: "houseDefaultUtilities_defaultUtilitiesId_fkey")
  house              house            @relation(fields: [houseId], references: [id], onDelete: Cascade, map: "houseDefaultUtilities_houseId_fkey")

  @@id([houseId, defaultUtilitiesId])
  @@index([defaultUtilitiesId], map: "houseDefaultUtilities_defaultUtilitiesId_fkey")
}

model houseotherutilities {
  houseId          Int
  otherUtilitiesId Int
  house            house          @relation(fields: [houseId], references: [id], onDelete: Cascade, map: "HouseOtherUtilities_houseId_fkey")
  otherutilities   otherutilities @relation(fields: [otherUtilitiesId], references: [id], onDelete: Cascade, map: "HouseOtherUtilities_otherUtilitiesId_fkey")

  @@id([houseId, otherUtilitiesId])
  @@index([otherUtilitiesId], map: "HouseOtherUtilities_otherUtilitiesId_fkey")
}

enum problem_type {
  common
  electric
  water
  other
}

enum defaultprice_unit {
  DONG_PER_MONTH     @map("đồng/tháng")
  DONG_PER_QUARTERLY @map("đồng/quý")
  DONG_PER_kWh       @map("đồng/kWh")
  DONG_PER_BLOCK     @map("đồng/khối")
  DONG_PER_PERSON    @map("đồng/người")
}

enum problem_status {
  none
  doing
  pending
  done
}

enum notification_type {
  bill
  news
  problem
  general
}

enum room_status {
  Empty
  Full
  Available
}

enum memberofroom_gender {
  male
  female
}

enum room_roomType {
  normal
  premium
}

enum account_provider {
  register
  gmail
}

enum bill_paymentMetod {
  Banking
  Cash
  None
}

enum account_accountType {
  owner
  renter
  manager
  admin
}
